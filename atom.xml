<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ANT锟</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kun1996.github.io/"/>
  <updated>2019-06-20T12:41:25.430Z</updated>
  <id>http://kun1996.github.io/</id>
  
  <author>
    <name>ANT KUN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx变量浅析</title>
    <link href="http://kun1996.github.io/2019/06/20/back-end/nginx/nginx/"/>
    <id>http://kun1996.github.io/2019/06/20/back-end/nginx/nginx/</id>
    <published>2019-06-20T10:46:00.000Z</published>
    <updated>2019-06-20T12:41:25.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx变量"><a href="#nginx变量" class="headerlink" title="nginx变量"></a>nginx变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line"></span><br><span class="line">    location /test &#123;</span><br><span class="line">        set $foo hello;</span><br><span class="line">        echo &quot;foo: $foo&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set指令是ngx_rewrite模块的，$foo是变量，可以在字符串中直接引用或者${foo}，但是怎么使用$符号呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">geo $dollar &#123;</span><br><span class="line">    default &quot;$&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line"></span><br><span class="line">    location /test &#123;</span><br><span class="line">       echo &quot;$dollar&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location /foo &#123;</span><br><span class="line">        set $a hello;</span><br><span class="line">        rewrite ^ /bar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /bar &#123;</span><br><span class="line">        echo &quot;a = [$a]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ngx_geo的geo模块可以解决,而且set定义的变量的生命周期是和请求的周期一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    location /test &#123;</span><br><span class="line">        echo &quot;uri = $uri&quot;;</span><br><span class="line">        echo &quot;request_uri = $request_uri&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    location /test &#123;</span><br><span class="line">        echo &quot;name: $arg_name&quot;;</span><br><span class="line">        echo &quot;class: $arg_class&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">location /test &#123;</span><br><span class="line">        set_unescape_uri $name $arg_name;</span><br><span class="line">        set_unescape_uri $class $arg_class;</span><br><span class="line"></span><br><span class="line">        echo &quot;name: $name&quot;;</span><br><span class="line">        echo &quot;class: $class&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ngx_http_core 模块提供的内建变量 $uri，可以用来获取当前请求的 URI（经过解码，并且不含请求参数），而 $request_uri 则用来获取请求最原始的 URI （未经解码，并且包含请求参数）<br>以 arg_ 开头的所有变量，称之为 $arg_XXX 变量群。一个例子是 $arg_name，这个变量的值是当前请求名为 name 的 URI 参数的值，而且还是未解码的原始形式的值<br>$arg_name 不仅可以匹配 name 参数，也可以匹配 NAME 参数，抑或是 Name，等等<br>第三方 ngx_set_misc 模块提供的 set_unescape_uri 配置指令对 URI 参数值中的 %XX 这样的编码序列进行解码,set_unescape_uri 指令也像 set 指令那样，拥有自动创建 Nginx 变量的功能.<br>类似 $arg_XXX 的内建变量还有不少，比如用来取 cookie 值的 $cookie_XXX 变量群，用来取请求头的 $http_XXX 变量群，以及用来取响应头的 $sent_http_XXX 变量群,可以参考 ngx_http_core 模块的官方文档。<br>$args参数可以改写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx变量&quot;&gt;&lt;a href=&quot;#nginx变量&quot; class=&quot;headerlink&quot; title=&quot;nginx变量&quot;&gt;&lt;/a&gt;nginx变量&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="back-end" scheme="http://kun1996.github.io/categories/back-end/"/>
    
    
      <category term="nginx" scheme="http://kun1996.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>lua lapis安装</title>
    <link href="http://kun1996.github.io/2019/06/19/back-end/lua/laips/"/>
    <id>http://kun1996.github.io/2019/06/19/back-end/lua/laips/</id>
    <published>2019-06-19T08:11:00.000Z</published>
    <updated>2019-06-19T09:03:56.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lapis安装"><a href="#lapis安装" class="headerlink" title="lapis安装"></a>lapis安装</h3><p><a href="http://leafo.net/lapis/" target="_blank" rel="noopener">lapis</a>是lua中的web框架，基于<a href="http://openresty.org/cn/" target="_blank" rel="noopener">openresty</a>,直接和nginx整合在一起，<br>支持lua和<a href="http://moonscript.org/" target="_blank" rel="noopener">moonscript</a>.</p><a id="more"></a><h4 id="安装openresty"><a href="#安装openresty" class="headerlink" title="安装openresty"></a>安装openresty</h4><p>openresty有win，linux，mac等版本，但为了更方便的安装lapis，建议在linux上安装，我这边使用的是centos7(我在win10上折腾了一天，还没装好lapis)</p><p>首先下载openresty，现在最新的是1.15版本，不建议安装（会出现一个全局变量导致的线程竞争的警告），建议用比这低一点的版本，但是也别太低，我用的是1.13.6.2版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">yum install pcre-devel openssl-devel gcc curl unzip</span><br><span class="line"><span class="comment"># 下载openresty</span></span><br><span class="line">wget https://openresty.org/download/openresty-1.13.6.2.tar.gz</span><br><span class="line">tar zxvf openresty-1.13.6.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openresty-1.13.6.2/</span><br><span class="line">./configure</span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><p>默认安装在/usr/local/openresty中<br>可以进去看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openresty</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># bin  COPYRIGHT  luajit  lualib  nginx  pod  resty.index  site</span></span><br><span class="line"><span class="built_in">cd</span> site/lualib</span><br><span class="line">mkdir work</span><br><span class="line"><span class="built_in">cd</span> work</span><br><span class="line">mkdir logs/ conf/</span><br><span class="line">vim /conf/nginx/conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log logs/error.log;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                ngx.say(<span class="string">"&lt;p&gt;hello, world&lt;/p&gt;"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx -p `<span class="built_in">pwd</span>`/ -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">curl http://localhost:8080</span><br><span class="line"><span class="comment"># &lt;p&gt;hello, world&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>openresty安装成功,<strong>最后记得把nginx进程杀掉哟</strong></p><h4 id="安装luarocks"><a href="#安装luarocks" class="headerlink" title="安装luarocks"></a>安装luarocks</h4><p>luarocks是lua的包管理器，centos7自带lua5.1版本，但是我们用openresty自带的luajit更好，因此不需要安装lua，直接装luarocks就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> wget http://luarocks.github.io/luarocks/releases/luarocks-3.1.3.tar.gz</span><br><span class="line"> tar zxvf luarocks-3.1.3.tar.gzcd </span><br><span class="line"> <span class="built_in">cd</span> luarocks-3.1.3/</span><br><span class="line"> ./configure --prefix=/usr/<span class="built_in">local</span>/openresty/luajit \</span><br><span class="line">    --with-lua=/usr/<span class="built_in">local</span>/openresty/luajit/ \</span><br><span class="line">    --lua-suffix=jit \</span><br><span class="line">    --with-lua-include=/usr/<span class="built_in">local</span>/openresty/luajit/include/luajit-2.1</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"> <span class="comment">#加入PATH=$PATH:/usr/local/openresty/luajit/bin</span></span><br><span class="line"> <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"> </span><br><span class="line"> luarocks install moonscript</span><br><span class="line"> luarocks install lapis</span><br></pre></td></tr></table></figure><p>到这里lapis就安装完成了</p><h4 id="测试lapis"><a href="#测试lapis" class="headerlink" title="测试lapis"></a>测试lapis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openresty/site/lualib</span><br><span class="line">lapis new --lua</span><br><span class="line">lapis server</span><br><span class="line"></span><br><span class="line"> curl http://localhost:8080</span><br><span class="line"><span class="comment">#&lt;!DOCTYPE HTML&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;Lapis Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Welcome to Lapis 1.7.0&lt;/body&gt;&lt;/html&gt;[root@VM_0_6_centos ~]</span></span><br></pre></td></tr></table></figure><p>lapis默认前台运行，方便开发</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;lapis安装&quot;&gt;&lt;a href=&quot;#lapis安装&quot; class=&quot;headerlink&quot; title=&quot;lapis安装&quot;&gt;&lt;/a&gt;lapis安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://leafo.net/lapis/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lapis&lt;/a&gt;是lua中的web框架，基于&lt;a href=&quot;http://openresty.org/cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;openresty&lt;/a&gt;,直接和nginx整合在一起，&lt;br&gt;支持lua和&lt;a href=&quot;http://moonscript.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;moonscript&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="back-end" scheme="http://kun1996.github.io/categories/back-end/"/>
    
    
      <category term="lua" scheme="http://kun1996.github.io/tags/lua/"/>
    
      <category term="基础" scheme="http://kun1996.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="lapis" scheme="http://kun1996.github.io/tags/lapis/"/>
    
  </entry>
  
  <entry>
    <title>暂无</title>
    <link href="http://kun1996.github.io/2019/06/10/front-end/index/"/>
    <id>http://kun1996.github.io/2019/06/10/front-end/index/</id>
    <published>2019-06-10T13:45:49.737Z</published>
    <updated>2019-06-10T13:47:23.416Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="front-end" scheme="http://kun1996.github.io/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>python metaclass</title>
    <link href="http://kun1996.github.io/2019/06/10/back-end/python/metaclass/"/>
    <id>http://kun1996.github.io/2019/06/10/back-end/python/metaclass/</id>
    <published>2019-06-10T10:18:00.000Z</published>
    <updated>2019-06-19T08:11:35.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python中元类metaclass分析"><a href="#python中元类metaclass分析" class="headerlink" title="python中元类metaclass分析"></a>python中元类metaclass分析</h3><p>metaclass是python中的重要概念，我来说一下理解吧，如有不对的地方，还请大家指正。</p><p>我认为metaclass是一切类的元类，可以理解为python中其实只有这一个类，就是type，其他的类都是type的实例对象，也就是平时我们定义的class，而我们实例化class，其实是调用type的实例的某个方法。</p><a id="more"></a><h4 id="认识type"><a href="#认识type" class="headerlink" title="认识type"></a>认识type</h4><p>type有两种用法</p><ul><li>type(object) -&gt; object的类型</li><li>type(name,base,dict) -&gt; 生产class  </li></ul><p>我们这里讲第二种方法</p><table><thead><tr><th align="left">参数</th><th align="right">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="right">class的名字，调用class().__class__会返回</td></tr><tr><td align="left">base</td><td align="right">一个元祖，继承的基类</td></tr><tr><td align="left">dict</td><td align="right">class._<em>dict_</em></td></tr></tbody></table><h4 id="自定义type"><a href="#自定义type" class="headerlink" title="自定义type"></a>自定义type</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">MyClass = type(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: __init__, <span class="string">'b'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">print(MyClass.__dict__)  <span class="comment"># &#123;'__init__': &lt;function __init__ at 0x000002AB8C992E18&gt;, 'b': 1, ...&#125;</span></span><br><span class="line">print(MyClass().__dict__)  <span class="comment"># &#123;'a': 1&#125;</span></span><br></pre></td></tr></table></figure><p>这里我们用type生成了一个MyClass类，从而避免了使用class语法定义<br>那么type的具体实现是怎么样的呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__方法执行了'</span>, args, kwargs)</span><br><span class="line">        super(MyType, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__new__方法执行了'</span>, args, kwargs)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__call__方法执行了'</span>, args, kwargs)</span><br><span class="line">        <span class="keyword">return</span> super(MyType, self).__call__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyClass = MyType(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: __init__, <span class="string">'b'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">print(MyClass.__dict__)</span><br><span class="line">print(MyClass().__dict__)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__new__方法执行了 (<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x000001FAC63D2E18</span>&gt;, <span class="string">'b'</span>: <span class="number">1</span>&#125;) &#123;&#125;</span><br><span class="line">__init__方法执行了 (<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x000001FAC63D2E18</span>&gt;, <span class="string">'b'</span>: <span class="number">1</span>&#125;) &#123;&#125;</span><br><span class="line">&#123;<span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x000001FAC63D2E18</span>&gt;, <span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">__call__方法执行了 () &#123;&#125;</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>我们其实可以发现  </p><ul><li>先执行__new__方法，返回一个MyClass类对象</li><li>立马执行__init__方法，进行MyClass类的初始化,定义一些属性</li><li>当MyClass类进行实例化的时候，调用__call__方法</li></ul><p>在平时实例化类的时候，我们知道，会调用__new__和__init__方法，而这里，实例化的时候调用了__call__方法，我们是不是可以猜测__call__里面调用了这两个方法呢，答案确实是这样，如果你在添加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'__new__方法2执行了'</span>, cls, args, kwargs)</span><br><span class="line">    <span class="keyword">return</span> object.__new__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>然后将代码改成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'__init__方法2执行了'</span>)</span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">MyClass = MyType(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: __init__, <span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'__new__'</span>: __new__&#125;)</span><br></pre></td></tr></table></figure><p>你就会发现在call后会输出new和init</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>python中()的执行，是靠魔法方法__call__的，也就是你在一个变量x后面加上(),即x()其实是调用的__call__方法，而实例化类的时候，其实就是调用了这个方法，最后返回一个对象，我们称作为实例。<br>class == type(name,base,dict)<br>self == class() == class.__call__()<br>因此python中可以认为只有一个类，那就是元类，其他的类都是元类的实例，而类的实例，只是类调用了魔法方法，而产生了不同的对象，即实例对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python中元类metaclass分析&quot;&gt;&lt;a href=&quot;#python中元类metaclass分析&quot; class=&quot;headerlink&quot; title=&quot;python中元类metaclass分析&quot;&gt;&lt;/a&gt;python中元类metaclass分析&lt;/h3&gt;&lt;p&gt;metaclass是python中的重要概念，我来说一下理解吧，如有不对的地方，还请大家指正。&lt;/p&gt;
&lt;p&gt;我认为metaclass是一切类的元类，可以理解为python中其实只有这一个类，就是type，其他的类都是type的实例对象，也就是平时我们定义的class，而我们实例化class，其实是调用type的实例的某个方法。&lt;/p&gt;
    
    </summary>
    
      <category term="back-end" scheme="http://kun1996.github.io/categories/back-end/"/>
    
    
      <category term="基础" scheme="http://kun1996.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://kun1996.github.io/tags/python/"/>
    
  </entry>
  
</feed>
