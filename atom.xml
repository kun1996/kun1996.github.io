<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ANT锟</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kun1996.github.io/"/>
  <updated>2019-06-10T13:47:23.416Z</updated>
  <id>http://kun1996.github.io/</id>
  
  <author>
    <name>ANT KUN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暂无</title>
    <link href="http://kun1996.github.io/2019/06/10/front-end/index/"/>
    <id>http://kun1996.github.io/2019/06/10/front-end/index/</id>
    <published>2019-06-10T13:45:49.737Z</published>
    <updated>2019-06-10T13:47:23.416Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="front-end" scheme="http://kun1996.github.io/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>python metaclass</title>
    <link href="http://kun1996.github.io/2019/06/10/back-end/python/metaclass/"/>
    <id>http://kun1996.github.io/2019/06/10/back-end/python/metaclass/</id>
    <published>2019-06-10T10:18:00.000Z</published>
    <updated>2019-06-10T15:28:40.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python中元类metaclass分析"><a href="#python中元类metaclass分析" class="headerlink" title="python中元类metaclass分析"></a>python中元类metaclass分析</h3><p>metaclass是python中的重要概念，我来说一下理解吧，如有不对的地方，还请大家指正。</p><p>我认为metaclass是一切类的元类，可以理解为python中其实只有这一个类，就是type，其他的类都是type的实例对象，也就是平时我们定义的class，而我们实例化class，其实是调用type的实例的某个方法。</p><a id="more"></a><h4 id="认识type"><a href="#认识type" class="headerlink" title="认识type"></a>认识type</h4><p>type有两种用法</p><ul><li>type(object) -&gt; object的类型</li><li>type(name,base,dict) -&gt; 生产class  </li></ul><p>我们这里讲第二种方法</p><table><thead><tr><th align="left">参数</th><th align="right">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="right">class的名字，调用class().__class__会返回</td></tr><tr><td align="left">base</td><td align="right">一个元祖，继承的基类</td></tr><tr><td align="left">dict</td><td align="right">class.__dict__\</td></tr></tbody></table><h4 id="自定义type"><a href="#自定义type" class="headerlink" title="自定义type"></a>自定义type</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">MyClass = type(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: __init__, <span class="string">'b'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">print(MyClass.__dict__)  <span class="comment"># &#123;'__init__': &lt;function __init__ at 0x000002AB8C992E18&gt;, 'b': 1, ...&#125;</span></span><br><span class="line">print(MyClass().__dict__)  <span class="comment"># &#123;'a': 1&#125;</span></span><br></pre></td></tr></table></figure><p>这里我们用type生成了一个MyClass类，从而避免了使用class语法定义<br>那么type的具体实现是怎么样的呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__方法执行了'</span>, args, kwargs)</span><br><span class="line">        super(MyType, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__new__方法执行了'</span>, args, kwargs)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__call__方法执行了'</span>, args, kwargs)</span><br><span class="line">        <span class="keyword">return</span> super(MyType, self).__call__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyClass = MyType(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: __init__, <span class="string">'b'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">print(MyClass.__dict__)</span><br><span class="line">print(MyClass().__dict__)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__new__方法执行了 (<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x000001FAC63D2E18</span>&gt;, <span class="string">'b'</span>: <span class="number">1</span>&#125;) &#123;&#125;</span><br><span class="line">__init__方法执行了 (<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x000001FAC63D2E18</span>&gt;, <span class="string">'b'</span>: <span class="number">1</span>&#125;) &#123;&#125;</span><br><span class="line">&#123;<span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x000001FAC63D2E18</span>&gt;, <span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">__call__方法执行了 () &#123;&#125;</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>我们其实可以发现  </p><ul><li>先执行__new__方法，返回一个MyClass类对象</li><li>立马执行__init__方法，进行MyClass类的初始化,定义一些属性</li><li>当MyClass类进行实例化的时候，调用__call__方法</li></ul><p>在平时实例化类的时候，我们知道，会调用__new__和__init__方法，而这里，实例化的时候调用了__call__方法，我们是不是可以猜测__call__里面调用了这两个方法呢，答案确实是这样，如果你在添加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'__new__方法2执行了'</span>, cls, args, kwargs)</span><br><span class="line">    <span class="keyword">return</span> object.__new__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>然后将代码改成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'__init__方法2执行了'</span>)</span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">MyClass = MyType(<span class="string">'MyClass'</span>, (), &#123;<span class="string">'__init__'</span>: __init__, <span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'__new__'</span>: __new__&#125;)</span><br></pre></td></tr></table></figure><p>你就会发现在call后会输出new和init</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>python中()的执行，是靠魔法方法_<em>call_<em>的，也就是你在一个变量x后面加上(),即x()其实是调用的__call__方法，而实例化类的时候，其实就是调用了这个方法，最后返回一个对象，我们称作为实例。<br>class == type(name,base,dict)<br>self == class() == class.__call\</em></em>()<br>因此python中可以认为只有一个类，那就是元类，其他的类都是元类的实例，而类的实例，只是类调用了魔法方法，而产生了不同的对象，即实例对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python中元类metaclass分析&quot;&gt;&lt;a href=&quot;#python中元类metaclass分析&quot; class=&quot;headerlink&quot; title=&quot;python中元类metaclass分析&quot;&gt;&lt;/a&gt;python中元类metaclass分析&lt;/h3&gt;&lt;p&gt;metaclass是python中的重要概念，我来说一下理解吧，如有不对的地方，还请大家指正。&lt;/p&gt;
&lt;p&gt;我认为metaclass是一切类的元类，可以理解为python中其实只有这一个类，就是type，其他的类都是type的实例对象，也就是平时我们定义的class，而我们实例化class，其实是调用type的实例的某个方法。&lt;/p&gt;
    
    </summary>
    
      <category term="back-end" scheme="http://kun1996.github.io/categories/back-end/"/>
    
    
      <category term="python" scheme="http://kun1996.github.io/tags/python/"/>
    
      <category term="基础" scheme="http://kun1996.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
